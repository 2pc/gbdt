!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
BUFFER_LENGTH	gradient_boosting.h	23;"	d
GBDT_INTERIOR	gradient_boosting.h	15;"	d
GBDT_TERMINAL	gradient_boosting.h	13;"	d
GBDT_TOSPLIT	gradient_boosting.h	14;"	d
LOG_ERROR_	gradient_boosting.h	27;"	d
LOG_NOTICE_	gradient_boosting.h	29;"	d
LOG_WARNING_	gradient_boosting.h	28;"	d
NO_VALUE	gradient_boosting.h	25;"	d
NUMERIC	gradient_boosting.cpp	1423;"	d	file:
R_qsort_I	gradient_boosting.cpp	/^void R_qsort_I(double *v, int *I, int i, int j)$/;"	f
SAMPLE_RATIO	gradient_boosting.h	21;"	d
SAMPLE_TYPE	gradient_boosting.h	20;"	d
bestid	gradient_boosting.h	/^	int bestid; \/\/!< 分裂使用的Feature ID$/;"	m	struct:__anon6
bestsplit	gradient_boosting.h	/^	double bestsplit; \/\/!< 分裂边界的x值$/;"	m	struct:__anon6
bufset	gradient_boosting.h	/^} bufset; \/\/!< 训练数据池$/;"	t	typeref:struct:__anon4
critparent	gradient_boosting.h	/^	double critparent; \/\/!< 分裂的评价值$/;"	m	struct:__anon5
data_num	gradient_boosting.h	/^	int data_num; \/\/!< 训练数据的数据量$/;"	m	struct:__anon2
depth	gradient_boosting.h	/^	int* depth;			\/\/ $/;"	m	struct:__anon1
fea_num	gradient_boosting.h	/^	int fea_num; \/\/!< Feature的数量$/;"	m	struct:__anon2
fea_pool	gradient_boosting.h	/^	int* fea_pool; \/\/!< 随机 feature 候选池$/;"	m	struct:__anon4
feature_average	gradient_boosting.h	/^	double* feature_average; \/\/!< Feature在训练数据的平均值$/;"	m	struct:__anon3
fill_novalue_feature	gradient_boosting.cpp	/^int fill_novalue_feature(double* x, int fea_num, int data_num, double* faverage)$/;"	f
free_model	gradient_boosting.cpp	/^int free_model(gbdt_model_t*& gbdt_model)$/;"	f
fv	gradient_boosting.h	/^	double* fv; \/\/!< 特征值排序用的buffer版本$/;"	m	struct:__anon4
fvalue_list	gradient_boosting.h	/^	double* fvalue_list; \/\/!< 以feature i 为拉链的特征值 x_i$/;"	m	struct:__anon4
gbdt_info_t	gradient_boosting.h	/^} gbdt_info_t; \/\/!< 模型配置参数的结构体$/;"	t	typeref:struct:__anon2
gbdt_load_model	gradient_boosting.cpp	/^gbdt_model_t* gbdt_load_model(char* model_file)$/;"	f
gbdt_load_reg_forest	gradient_boosting.cpp	/^int gbdt_load_reg_forest(FILE* model_fp, gbdt_model_t* gbdt_model)$/;"	f
gbdt_max_depth	gradient_boosting.h	/^	int gbdt_max_depth; \/\/!< 树停止的条件，树的深度$/;"	m	struct:__anon2
gbdt_min_node_size	gradient_boosting.h	/^	int gbdt_min_node_size; \/\/!< 树停止的条件，节点覆盖的最少的数据量$/;"	m	struct:__anon2
gbdt_model_t	gradient_boosting.h	/^}gbdt_model_t; \/\/!< GBDT模型的结构体$/;"	t	typeref:struct:__anon3
gbdt_regression_predict	gradient_boosting.cpp	/^int gbdt_regression_predict(gbdt_model_t* gbdt_model, double *x_test, double& ypredict)$/;"	f
gbdt_regression_train	gradient_boosting.cpp	/^gbdt_model_t* gbdt_regression_train(double *x_fea_value, double *y_result_score, gbdt_info_t infbox)$/;"	f
gbdt_save_model	gradient_boosting.cpp	/^int gbdt_save_model(gbdt_model_t* gbdt_model, char* model_filename)$/;"	f
gbdt_save_reg_forest	gradient_boosting.cpp	/^int gbdt_save_reg_forest(FILE* model_fp, gbdt_tree_t** reg_forest, gbdt_info_t infbox)$/;"	f
gbdt_single_tree_estimation	gradient_boosting.cpp	/^int gbdt_single_tree_estimation($/;"	f
gbdt_tree_node_split	gradient_boosting.cpp	/^int gbdt_tree_node_split( $/;"	f
gbdt_tree_predict	gradient_boosting.cpp	/^int gbdt_tree_predict(double *x_test, gbdt_tree_t *gbdt_single_tree, double& ypred, double shrink)$/;"	f
gbdt_tree_t	gradient_boosting.h	/^}gbdt_tree_t;$/;"	t	typeref:struct:__anon1
has_colon	gbdt_train.cpp	/^ bool has_colon(string item)$/;"	f
index_b	gradient_boosting.h	/^	int index_b; \/\/!< 节点覆盖数据的开始$/;"	m	struct:__anon5
index_e	gradient_boosting.h	/^	int index_e; \/\/!< 节点覆盖数据的结束$/;"	m	struct:__anon5
info	gradient_boosting.h	/^	gbdt_info_t info; \/\/!< GBDT的配置参数$/;"	m	struct:__anon3
init_info	gradient_boosting.cpp	/^int init_info(gbdt_info_t& infbox)$/;"	f
load_gbdt_info	gradient_boosting.cpp	/^int load_gbdt_info(gbdt_info_t* pinfbox, FILE* model_fp)$/;"	f
lson	gradient_boosting.h	/^	int* lson;			\/\/!< $/;"	m	struct:__anon1
main	gbdt_train.cpp	/^int main(int argc, char* argv[])$/;"	f
max_feature_label	gradient_boosting.cpp	/^int max_feature_label(string line)$/;"	f
model_filename	gradient_boosting.h	/^	char model_filename[BUFFER_LENGTH]; \/\/!< 模型文件名$/;"	m	struct:__anon2
my_memset	gbdt_train.cpp	/^void my_memset(double* x, int count, int value)$/;"	f
ndavg	gradient_boosting.h	/^	double* ndavg;		\/\/!< 节点内元素的均值 $/;"	m	struct:__anon1
ndcount	gradient_boosting.h	/^	int* ndcount;		\/\/!< 节点内元素的个数$/;"	m	struct:__anon1
ndstart	gradient_boosting.h	/^	int* ndstart;		\/\/!< 节点对应于 Index 的开始位置$/;"	m	struct:__anon1
nodeinfo	gradient_boosting.h	/^} nodeinfo; \/\/!< 节点的信息$/;"	t	typeref:struct:__anon5
nodenum	gradient_boosting.h	/^	int nodenum; \/\/!< 节点覆盖的数据量$/;"	m	struct:__anon5
nodesize	gradient_boosting.h	/^	int nodesize;		\/\/!< 树的节点个数$/;"	m	struct:__anon1
nodestatus	gradient_boosting.h	/^	int* nodestatus;	\/\/!<  $/;"	m	struct:__anon1
nodesum	gradient_boosting.h	/^	double nodesum; \/\/!< 节点覆盖的数据y值的和，回归用$/;"	m	struct:__anon5
order_i	gradient_boosting.h	/^	int* order_i; \/\/!< 排序的标号$/;"	m	struct:__anon4
pivot	gradient_boosting.h	/^	int pivot; \/\/!< 分裂边界的数据标号				 $/;"	m	struct:__anon6
print_usage	gradient_boosting.cpp	/^int print_usage (FILE* stream, char* program_name)$/;"	f
qsort_Index	gradient_boosting.cpp	1422;"	d	file:
rand_fea_num	gradient_boosting.h	/^	int rand_fea_num; \/\/!< Feature的采样数量$/;"	m	struct:__anon2
read_conf_file	gradient_boosting.cpp	/^int read_conf_file(gbdt_info_t& infbox, int argc, char* argv[])$/;"	f
read_train_file	gbdt_train.cpp	/^int read_train_file( $/;"	f
reg_forest	gradient_boosting.h	/^	gbdt_tree_t** reg_forest; \/\/!< 回归森林$/;"	m	struct:__anon3
rson	gradient_boosting.h	/^	int* rson;			\/\/!< $/;"	m	struct:__anon1
sample_num	gradient_boosting.h	/^	int sample_num; \/\/!< 训练数据的采样量$/;"	m	struct:__anon2
save_gbdt_info	gradient_boosting.cpp	/^int save_gbdt_info(gbdt_info_t infbox, FILE* model_fp)$/;"	f
shrink	gradient_boosting.h	/^	double shrink; \/\/!< 学习率$/;"	m	struct:__anon2
splitid	gradient_boosting.h	/^	int* splitid;		\/\/!< $/;"	m	struct:__anon1
splitinfo	gradient_boosting.h	/^} splitinfo; \/\/!< 分裂的信息$/;"	t	typeref:struct:__anon6
splitline	gradient_boosting.cpp	/^int splitline(string line, string items[], int items_num, const char separator)$/;"	f
splitvalue	gradient_boosting.h	/^	double* splitvalue; \/\/!< $/;"	m	struct:__anon1
swap_int	gradient_boosting.h	18;"	d
train_filename	gradient_boosting.h	/^	char train_filename[BUFFER_LENGTH]; \/\/!< 训练样本的文件名$/;"	m	struct:__anon2
tree_num	gradient_boosting.h	/^	int tree_num; \/\/!< 森林树的个数$/;"	m	struct:__anon2
uint32	gradient_boosting.h	17;"	d
y_list	gradient_boosting.h	/^	double* y_list; \/\/!< 回归的y值集合$/;"	m	struct:__anon4
